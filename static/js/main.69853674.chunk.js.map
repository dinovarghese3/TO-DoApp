{"version":3,"sources":["component/todo/todo.js","App.js","serviceWorker.js","index.js"],"names":["TODO","state","input","items","handleChange","event","target","value","setState","storeItem","preventDefault","allinput","push","deleteitem","key","console","log","splice","this","className","action","onSubmit","type","onChange","placeholder","map","data","index","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4NA6EeA,G,wNA1EbC,MAAQ,CACNC,MAAO,GACPC,MAAO,I,EAETC,aAAe,SAACC,GACVA,EAAMC,OAAOC,OACf,EAAKC,SAAS,CACZN,MAAOG,EAAMC,OAAOC,S,EAI1BE,UAAY,SAACJ,GACXA,EAAMK,iBADe,IAEbR,EAAU,EAAKD,MAAfC,MACFS,EAAW,EAAKV,MAAME,MACxBQ,IACFA,EAASC,KAAKV,GACd,EAAKM,SAAS,CACZL,MAAOQ,EACPT,MAAO,O,EAIbW,WAAa,SAACC,GACZC,QAAQC,IAAIF,GACZ,IAAMH,EAAW,EAAKV,MAAME,MAC5BQ,EAASM,OAAOH,EAAK,GACrB,EAAKN,SAAS,CACZL,MAAOQ,K,uDAID,IAAD,SACkBO,KAAKjB,MAAtBC,EADD,EACCA,MAAOC,EADR,EACQA,MAEf,OADAY,QAAQC,IAAIb,GAEV,yBAAKgB,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,SACb,yCAEF,yBAAKA,UAAU,UACb,0BAAMC,OAAO,IAAIC,SAAUH,KAAKT,WAC9B,2BACEa,KAAK,OACLf,MAAOL,EACPqB,SAAUL,KAAKd,aACfoB,YAAY,kBAKpB,yBAAKL,UAAU,aACb,4BACGhB,EAAMsB,KAAI,SAACC,EAAMC,GAAP,OACT,yBAAKR,UAAU,SACb,yBAAKA,UAAU,WACb,wBAAIL,IAAKa,GAAQD,GACjB,4BACEP,UAAU,YACVS,QAAS,kBAAM,EAAKf,WAAWc,KAFjC,sB,GA3DCE,cCOJC,E,uKAJX,OAAO,kBAAC,EAAD,U,GAFOD,aCSEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.69853674.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./todo.css\";\r\nclass TODO extends Component {\r\n  state = {\r\n    input: \"\",\r\n    items: [],\r\n  };\r\n  handleChange = (event) => {\r\n    if (event.target.value) {\r\n      this.setState({\r\n        input: event.target.value,\r\n      });\r\n    }\r\n  };\r\n  storeItem = (event) => {\r\n    event.preventDefault();\r\n    const { input } = this.state;\r\n    const allinput = this.state.items;\r\n    if (allinput) {\r\n      allinput.push(input);\r\n      this.setState({\r\n        items: allinput,\r\n        input: \"\",\r\n      });\r\n    }\r\n  };\r\n  deleteitem = (key) => {\r\n    console.log(key);\r\n    const allinput = this.state.items;\r\n    allinput.splice(key, 1);\r\n    this.setState({\r\n      items: allinput,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { input, items } = this.state;\r\n    console.log(items);\r\n    return (\r\n      <div className=\"maindiv\">\r\n        <div className=\"alldiv\">\r\n          <div className=\"input\">\r\n            <h1>TODO APP</h1>\r\n          </div>\r\n          <div className=\"boxdiv\">\r\n            <form action=\"#\" onSubmit={this.storeItem}>\r\n              <input\r\n                type=\"text\"\r\n                value={input}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Enter item\"\r\n              />\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div className=\"resultdiv\">\r\n          <ul>\r\n            {items.map((data, index) => (\r\n              <div className=\"lidiv\">\r\n                <div className=\"loopdiv\">\r\n                  <li key={index}>{data}</li>\r\n                  <button\r\n                    className=\"deletebtn\"\r\n                    onClick={() => this.deleteitem(index)}\r\n                  >\r\n                    delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TODO;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TODO from \"./component/todo/todo\";\nclass App extends Component {\n  render() {\n    return <TODO />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}